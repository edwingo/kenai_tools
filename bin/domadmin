#!/usr/bin/env ruby

require 'rubygems'
require "bundler/setup"

$LOAD_PATH << File.dirname(__FILE__) + '/../lib'
require 'ostruct'
require 'optparse'
require 'highline/import'
require 'kenai_tools'

PROGRAM = File.basename(__FILE__)

# Array of command info. Keys are
# :name = command line name
# :call = name of method to call instead of :name, if specified
# :result = method produces a result, default is false
# :authenticate = method requires authentication
# :local = local processing only, remote host not used
COMMANDS = [
  {:name => :find_lists, :authenticate => true},
  {:name => :filter_empty_and_created_before, :local => true},
  {:name => :filter_archive_last_updated_before, :local => true},
  {:name => :filter_missing_from_mlm, :local => true},
  {:name => :empty_lists, :call => :find_empty_lists, :authenticate => true},
  {:name => :missing_lists, :call => :find_missing_lists, :authenticate => true},
  {:name => :exec, :call => :execute, :authenticate => true},
  {:name => :ping, :result => true},
  {:name => :login, :call => :ping, :authenticate => true, :result => true},
]

options = OpenStruct.new
@opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{PROGRAM} [options] COMMAND [args] ..."

  def wrap(s, width = 78)
    s.gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n")
  end

  opts.separator "Note: Unix OS is recommended as some commands fail on Windows"
  opts.separator "Commands:"
  opts.separator "  ping"
  opts.separator "  login"
  opts.separator "  find_lists [start=1] [length=nil] [per_page=10] (writes YAML to stdout)"
  opts.separator "  filter_empty_and_created_before LIST.yml ISO_DATE (writes YAML to stdout)"
  opts.separator "  filter_archive_last_updated_before LIST.yml ISO_DATE (writes YAML to stdout)"
  opts.separator "  filter_missing_in_mlm (writes YAML to stdout)"
  opts.separator "  exec SCRIPT.yml"
  opts.separator "Examples:"
  opts.separator "  #{PROGRAM} -r java.net ping"
  opts.separator "  #{PROGRAM} -r java.net login"
  opts.separator "  #{PROGRAM} -r java.net find_lists > find_lists.yml"
  opts.separator "  #{PROGRAM} -r java.net find_lists 5 10 20 > find_lists_5_10_20.yml"
  opts.separator "  #{PROGRAM} filter_empty_and_created_before find_lists.yml 2011-11-01 > delete_lists.yml"
  opts.separator "  #{PROGRAM} filter_archive_last_updated_before find_lists.yml 2010-06-01 > delete_lists.yml"
  opts.separator "  #{PROGRAM} filter_missing_in_mlm find_lists.yml > delete_missing_lists.yml"
  opts.separator "  #{PROGRAM} -r java.net exec delete_lists.yml"
  opts.separator "  #{PROGRAM} -r java.net exec create_lists.yml"
  opts.separator ""
  opts.separator "Specific options:"

  def to_url(host_or_url)
    host_or_url =~ %r{^http(s?)://} ? host_or_url : "https://#{host_or_url}"
  end

  opts.on("-r", "--remote ENDPOINT_SPEC", "Remote endpoint SITE",
    "  SITE may be simply HOST or http(s)?://HOST:PORT") do |v|
    options.host_url = to_url(v)
  end

  opts.on("-p", "--password-file FILE", "Read username/password (nl-separated) from FILE") do |v|
    options.password_file = v
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-n", "--dry_run", "Do not execute any destructive actions") do |v|
    options.dry_run = v
  end

  opts.on("-k", "--insecure", "Do not validate SSL certificates") do |v|
    options.insecure = v
  end

  opts.on("-t", "--timeout SECS", "Timeout in seconds") do |v|
    options.timeout = v
  end

  opts.on("--cloak-password PASSWORD", "Cloaking password") do |v|
    options.cloak_password = v
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

def usage
  puts @opts
  exit 1
end

begin
  @opts.parse!
rescue
  usage
end

usage unless command = ARGV.shift
usage unless cmd_info = COMMANDS.find { |info| info[:name] == command.to_sym }
usage if !cmd_info[:local] && !options.host_url

def get_credentials(options, params)
  user, password = nil
  if options.password_file
    File.open(options.password_file) do |f|
      user, password = f.read.split
    end
  else
    say "Please enter your login credentials for #{options.host_url}"
    user = ask('Username: ')
    password = ask('Password: ') { |q| q.echo = '*' }
  end
  [user, password]
end

params = {}
params[:user], params[:password] = get_credentials(options, params) if cmd_info[:authenticate]
params[:dry_run] = options.dry_run if options.dry_run
params[:insecure] = options.insecure if options.insecure
params[:cloak_password] = options.cloak_password if options.cloak_password
params[:timeout] = options.timeout if options.timeout
params[:log] = $stderr if options.verbose
daclient = KenaiTools::DomainAdminClient.new(options.host_url, params)

method_name = cmd_info[:call] ? cmd_info[:call] : cmd_info[:name]
result = daclient.send(method_name, *ARGV)
if cmd_info[:result]
  puts String === result ? result : result.inspect
end
